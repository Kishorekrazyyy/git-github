import random

# Function to initialize the game grid
def initialize_grid(size):
    grid = [[0] * size for _ in range(size)]
    return grid

# Function to add a new tile (either 2 or 4) to a random empty cell
def add_new_tile(grid):
    empty_cells = [(i, j) for i in range(len(grid)) for j in range(len(grid[0])) if grid[i][j] == 0]
    if empty_cells:
        row, col = random.choice(empty_cells)
        grid[row][col] = random.choice([2, 4])
        return True
    return False

# Function to print the game grid
def print_grid(grid):
    for row in grid:
        print(' '.join(map(str, row)))

# Function to move tiles left
def move_left(grid):
    size = len(grid)
    for i in range(size):
        for j in range(size - 1):
            if grid[i][j] == 0:
                for k in range(j + 1, size):
                    if grid[i][k] != 0:
                        grid[i][j], grid[i][k] = grid[i][k], grid[i][j]
                        break
    for i in range(size):
        for j in range(size - 1):
            if grid[i][j] == grid[i][j + 1] and grid[i][j] != 0:
                grid[i][j] *= 2
                grid[i][j + 1] = 0
    for i in range(size):
        for j in range(size - 1):
            if grid[i][j] == 0:
                for k in range(j + 1, size):
                    if grid[i][k] != 0:
                        grid[i][j], grid[i][k] = grid[i][k], grid[i][j]
                        break

# Function to move tiles right
def move_right(grid):
    flip_grid_horizontally(grid)
    move_left(grid)
    flip_grid_horizontally(grid)

# Function to move tiles up
def move_up(grid):
    transpose_grid(grid)
    move_left(grid)
    transpose_grid(grid)

# Function to move tiles down
def move_down(grid):
    transpose_grid(grid)
    move_right(grid)
    transpose_grid(grid)

# Function to transpose the game grid
def transpose_grid(grid):
    size = len(grid)
    for i in range(size):
        for j in range(i, size):
            grid[i][j], grid[j][i] = grid[j][i], grid[i][j]

# Function to flip the game grid horizontally
def flip_grid_horizontally(grid):
    size = len(grid)
    for i in range(size):
        for j in range(size // 2):
            grid[i][j], grid[i][size - j - 1] = grid[i][size - j - 1], grid[i][j]

# Function to check if the game is over
def is_game_over(grid):
    for i in range(len(grid)):
        for j in range(len(grid[0])):
            if grid[i][j] == 0:
                return False
            if j + 1 < len(grid[0]) and grid[i][j] == grid[i][j + 1]:
                return False
            if i + 1 < len(grid) and grid[i][j] == grid[i + 1][j]:
           
